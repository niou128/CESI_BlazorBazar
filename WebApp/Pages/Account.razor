@page "/account"

@inject UserServiceClient UserService
@inject OrderServiceClient OrderService
@inject ProductServiceClient ProductService
@inject IJSRuntime JSRuntime
@using OrderService

<h3>Mon Compte</h3>

@if (RegistrationSuccess)
{
    <div class="alert alert-success">
        Vous vous êtes inscrit avec succès ! Veuillez vous connecter.
    </div>
}
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">
        @ErrorMessage
    </div>
}
@if (IsLoggedIn)
{
    <div>
        Bienvenue, @Username !
        <button @onclick="Logout">Se déconnecter</button>

        <h4>Vos commandes :</h4>
        @if (UserOrders.Any())
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Produit</th>
                        <th>Quantité</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in UserOrders)
                    {
                        <tr>
                            <td>@ProductNames[order.ProductId]</td>
                            <td>@order.Quantity</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>Aucune commande n'a été effectuée.</p>
        }
    </div>
}
else
{
    <div>
        <h4>Connexion</h4>
        <label>Username: </label>
        <input @bind="Username" />
        <label>Password: </label>
        <input type="password" @bind="Password" />
        <button @onclick="Login">Se connecter</button>

        <h4>Créer un compte</h4>
        <label>Username: </label>
        <input @bind="NewUsername" />
        <label>Password: </label>
        <input type="password" @bind="NewPassword" />
        <label>Email:</label>
        <input type="email" @bind="NewEmail" />
        <button @onclick="Register">S'inscrire</button>
    </div>
}

@code {
    private string Username { get; set; } = "";
    private string Password { get; set; } = "";
    private string NewUsername { get; set; } = "";
    private string NewPassword { get; set; } = "";
    private string NewEmail { get; set; } = "";
    private bool IsLoggedIn { get; set; } = false;
    private bool RegistrationSuccess { get; set; } = false;
    private string ErrorMessage { get; set; }
    private List<OrderReply> UserOrders { get; set; } = new List<OrderReply>();
    private Dictionary<int, string> ProductNames = new Dictionary<int, string>();

    protected override async Task OnInitializedAsync()
    {
        var token = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "jwtToken");
        IsLoggedIn = !string.IsNullOrEmpty(token);
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadUserOrders();
    }

    private async Task LoadUserOrders()
    {
        await EnsureUserLoggedInAndLoadOrders();
        await LoadProductNames();
    }

    private async Task LoadProductNames()
    {
        var products = await ProductService.GetProducts();
        ProductNames = products.ToDictionary(p => p.Id, p => p.Name);
    }

    private async Task Login()
    {
        try
        {
            var token = await UserService.Login(Username, Password);
            if (!string.IsNullOrEmpty(token))
            {
                await FinalizeLogin(token);
            }
        }
        catch (HttpRequestException ex)
        {
            ErrorMessage = "Erreur lors de la connexion. Veuillez vérifier vos identifiants.";
        }
    }

    private async Task FinalizeLogin(string token)
    {
        IsLoggedIn = true;
        await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "jwtToken", token);
        ErrorMessage = null;
        await EnsureUserLoggedInAndLoadOrders();
    }

    private async Task EnsureUserLoggedInAndLoadOrders()
    {
        var token = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "jwtToken");
        IsLoggedIn = !string.IsNullOrEmpty(token);
        UserOrders.Clear();

        if (IsLoggedIn)
        {
            var userId = UserService.GetUserIdFromToken(token);
            if (userId.HasValue)
            {
                UserOrders = await OrderService.GetOrdersForUser(userId.Value.ToString());
            }
        }
    }

    private async Task Register()
    {
        var user = new User { Username = NewUsername, Password = NewPassword, Email = NewEmail };
        await UserService.Register(user);
        RegistrationSuccess = true;
    }

    private async Task Logout()
    {
        IsLoggedIn = false;
        await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "jwtToken");
    }

}
